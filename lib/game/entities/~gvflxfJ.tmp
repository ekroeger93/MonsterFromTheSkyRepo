ig.module(
	'game.entities.Sling'
)
.requires(
'impact.game',
'impact.entity'
)
.defines(function(){


/*
 * objectives
 *  - timer to stabilize sling for reload X
 *  - pulling sling intuition 
 * 		-show pwr gaudge
 * 		-smooth transitioning, prevent from
 *			 sling hitting the screen edge
 * 		-limit pull strech
 * 		-prevent faulty launching, by implementing
 * 		a lock on the release of sling if ball will not launch
 * 		-automatic slingshot? 
 * 		-nesccary callibrations
 * 		-increase intensity of pwr on high tension 
 * 		of pulling/ increase sensitivity of power
 * 		when pulling rather than a consistant 
 * 		increase of pwr on high tension/ like pulling a bow
 * 		where just increments of pull create higher maginitude 
 * 	
 * 		-high magnitude causes sling to go heywire property modfication 
 * 		maybe nesscary to maintain balance
 * */

EntitySling = ig.Entity.extend({

animSheet: new ig.AnimationSheet('media/Sling.png',56,36),
zIndex:2,
unId: null,
ballType:null,
offset: {x: 28, y:0},//-16

maxVel: {x:20000,y:20000},
gravityFactor: 0,

initalPos : null,
potEnergy:null, //potentail energy
kenEnergy: null,//kenetic energy
pull: null,     //constant displacement
amplitude:0,    //extreme position of Oscillation
amplitudeX:0,   //extreme position of Oscillation x
frequency: 0,   //rate of Amp due to time 0.04
frequencyX:0,	//rate of Amp due to time 0.04 x
period: 0,	//time between Oscillation 
stiffness:12  ,//6

magitude: 100  ,//sling is unstable at high maginitude and low stiffness

//event 
hold : false,
atRest: false,
release: false,
delayTrigger:0,
stableTrigger:0,

//this.stableTigger = new ig.Timer();

//analytical
initalVel:0,
prePositionY:0,//solved positioning
sumAmp: [],
preDeterArray:[],// [3,20], amp,vel,pos
appoxTime: 0,
appoxHeight:0,
maxVelocity:0,







init: function(x,y,settings){
	
	
ig.game.spawnEntity("EntitySlingShot",350, 1000);//disable

this.parent(x,y,settings);

this.stableTrigger = new ig.Timer();
this.addAnim('sling', 1, [0]);
this.initalPos = {x: this.pos.x, y: this.pos.y}
this.pull = {x: 0, y: 0};
this.potEnergy= {x: 0, y: 0};
this.kenEnergy= {x: this.pull.x, y: this.pull.y}
this.vel.y = 0 ;
this.vel.x = 0;

this.preDeterArray= new Array(3)
for( i = 0; i <3; i++){
this.preDeterArray[i] = new Array(20)}
this.sumAmp= new Array(20)
this.stableTrigger.pause()
this.atRest = true
},

update: function(){
this.parent();


//console.log("KE = "+this.kenEnergy.y.round()+ "	PE = "+this.potEnergy.y.round())
//console.log(""+this.potEnergy.y)

var ball; //< make this globally available 
var slingshot = ig.game.getEntitiesByType(EntitySlingShot)[0];


this.ballType === null ?   ig.game.loadedBallType = ig.game.getEntitiesByType(EntityBall)[0] : ig.game.loadedBallType = this.ballType;

ball = ig.game.loadedBallType;

this.period = (2*Math.PI)/ Math.sqrt(this.stiffness/ball.weight)
this.amplitude = (((this.pos.y - this.initalPos.y)/this.period)/this.stiffness) 
this.amplitudeX = (( (this.initalPos.x-this.pos.x)/this.period)/(this.stiffness))



//console.log(this.stableTrigger.delta())
//console.log(this.prePositionY)

//STABLEIZE  BEGIN			

	if (this.vel.y == 0 && this.vel.x== 0 && this.hold == false || this.stableTrigger.delta() >= 3 && this.hold == false
	) {
	  this.stableTrigger.set(0)
	        this.stableTrigger.pause()
		
		this.atRest = true;
		this.frequency = 0
		this.frequencyX =0
		this.amplitude = 0
		this.amplitudeX = 0
		this.vel.y =0;
	        this.vel.x =0;
		this.hold =false 
		this.kenEnergy.y =0;
		this.kenEnergy.x =0;
		this.potEnergy.x = 0
		this.potEnergy.y = 0
		this.pos.y = this.initalPos.y;
		this.pos.x = this.initalPos.x;
		this.maxVel.x =0 ;
		this.maxVel.y= 0;
		 }else {this.atRest = false}
//END

//FLIP ANIMATION BEGIN			

this.pos.y > slingshot.pos.y-10 ? (//-10
this.currentAnim.flip.y = false, this.offset.y =-18) :( 
this.currentAnim.flip.y = true, this.offset.y =18);//END
//end
    
//RELEASE  BEGIN			          

	if ( (this.prePositionY+1000).round(-3) == this.pos.y.round(-3) && this.hold == false //< causes inaccracies?
	&& this.atRest==0  && ball.vel.y== 0  && ball.grounded ==false)
	{
	  
		this.pos.y = this.prePositionY+1000//< correcting position
		this.release = true;//<
		
this.stableTrigger.unpause()
}
	else if (ball.vel.y != 0 || ball.vel.y == 0 && ball.stick2Wall == true ) this.release = false;
//END	

//MOUSE CLICK EVENTS  BEGIN		 
	if (ig.game.gameMode == 1){
	ig.input.pressed('click') 
	&& this.atRest== true
	
	?(
	this.hold =this._inParameter() , 
	this.vel.x= 0,
	this.vel.y=0,
	this.frequencyX=0,
	this.frequency= 0

	):
	
	
// for  y	
	(ig.input.released('click')
	&& this.pos.y >= this.initalPos.y) ?
	(this.hold = false, this.pull.y = (this.pos.y-this.initalPos.y)
	): (this.vel.y = this.vel.y);

		

// for x 	

	(ig.input.released('click')
	&& this.pos.x > this.initalPos.x)   ? 
	(this.pull.x = (this.pos.x-this.initalPos.x)) :

	(ig.input.released('click')
	&& this.pos.x < this.initalPos.x)	?
	(this.pull.x = (this.initalPos.x - this.pos.x)) : (this.pull.x = this.pos.x)





		}
//END of Mouse Event 

//HOLD AND LAUNCH EVENT BEGIN		

	
	//console.log(this.maxVelocity )
	if (this.hold == true)
	{	
	this.appoxTime=( -this.maxVelocity / 300);

	this.pos.x = ig.game.screen.x+(ig.input.mouse.x).round(); 
	this.pos.y = (ig.game.screen.y+(ig.input.mouse.y)).round();

	this.potEnergy.y = (this.pos.y - this.initalPos.y);
	this.potEnergy.x = (this.pos.x - this.initalPos.x);

	this.initalVel = ((-this.magitude*this.potEnergy.y)/ball.weight)-.4;

	  
	}else if (this.hold == false && this.appoxHeight >400
	  
	)
	
	{
	
	  
	this.maxVel.x = 20000;
	this.maxVel.y = 20000;

	this.frequencyX -= -this.amplitudeX;//rate of amps per .04 sec frequency?
	this.frequency  -= this.amplitude;
	
	this.kenEnergy.y =this.pull.y*(this.frequency);//displacemnt * frequency = KE ??  
	this.kenEnergy.x =this.pull.x*(this.frequencyX);
        
        this.vel.x = ((this.magitude*((this.kenEnergy.x) - (this.potEnergy.x)))/ball.weight);//<
        this.vel.y =((-this.magitude*((this.potEnergy.y) - (this.kenEnergy.y)))/ball.weight);//<
	  
	  
	}
	
if (this.hold== false && this.pos.y != this.initalPos.y ){}
	
	//END


	if (this.release == false) {this.potEnergy.y = (this.pos.y - this.initalPos.y);
								this.potEnergy.x = (this.pos.x - this.initalPos.x);}

//CALCULATION FOR MAX VELOCITY BEGIN  

	var sumOf =0;

	if (this.hold == true ){

		for (i= 0; i < this.sumAmp.length; i ++ ){
			for (j = 1; j < i; j++	){
				if (typeof this.preDeterArray[0][j] != 'undefined'){
				sumOf += this.preDeterArray[0][j]} }
				this.sumAmp[i] = sumOf; sumOf = 0;	}


//Initial Values 
		this.preDeterArray[0][0] = this.amplitude;// 1st Amp
		this.preDeterArray[1][0] = this.initalVel;// 1st Vel
		this.preDeterArray[1][1] = this.initalVel;// 2nd Vel
		this.preDeterArray[2][0] = this.potEnergy.y;// 1st or 2nd Pos
		this.preDeterArray[2][1] = this.potEnergy.y

		for (i = 2 ; i <this.preDeterArray[2].length ; i ++){
	//solve Pos 
	this.preDeterArray[2][i] = this.preDeterArray[2][i-1] - (Math.abs(this.preDeterArray[1][i-1])*0.08)/2;
	//solve amp 
    this.preDeterArray[0][i-1] = this.preDeterArray[2][i]/this.period/this.stiffness
	//solve vel
	this.preDeterArray[1][i] = (((
    (this.sumAmp[i])
    *Math.abs(this.potEnergy.y)+this.preDeterArray[2][i-1])*this.magitude)/ball.weight) +.4 	}//<



		for (i= 1 ; i < this.preDeterArray[0].length ; i ++){
			
			if (typeof this.preDeterArray[1][i] != 'undefined'){
				this.preDeterArray[1][i] > this.preDeterArray[1][i-1] ? 
				(this.maxVelocity =this.preDeterArray[1][i], this.prePositionY=this.preDeterArray[2][i] )
			:	(this.maxVelocity  = this.preDeterArray[1][i-1], this.prePositionY=this.preDeterArray[2][i-1]) }
	else 	{this.maxVelocity = this.preDeterArray[1][i-1]; this.prePositionY=this.preDeterArray[2][i-1];break;}

		if (this.preDeterArray[1][i+1] < this.preDeterArray[1][i] ) break;

}
//END Of Max Velocity Calculation 



//////////////////////////////////////////////////////////////////////////



//MAXIMUM HEIGHT CALCULATION BEGIN


var a, b, c, d, e, f, g,eSum, h,k, z,x; 
eSum = new Array(360)//800

z=0
x=0

h=12
k=.48

	if (this.vel.y == 0){
		
		

		for (i= 1; ;i++)
		{	
	
a = (0.04*i)//	Time Frames  eg. 0.04, 0.08, 0.12 
b= (0.04*i)*ig.game.gravity - this.maxVelocity 
	
c=k-(( (h*i)/h)*.04)//.36
			
d=(a*11-c)//optimize for accuracy
			
// this need to be cached
f = eSum.reduce( function(total, num){ return total + num }, 0);//SUM

//revise sum 2

//for ( x =eSum.length; x--;) z+=eSum[x];
			
		
			if ( (i)*h >this.maxVelocity){		
				e = (a*(h-b)+f)//optimize for accuracy
				break;}
				
			else{	
			if (i*h >= h*3//36 12*3
			){
				eSum[i]=d//optimize for accuracy
			}
				}
	
	}

this.appoxHeight = (this.prePositionY-e)*-1//Solution 


}
//END



//////////////////////////////////////////////////////////////////////////



}



},


type: ig.Entity.TYPE.A,
checkAgainst: ig.Entity.TYPE.A,
collides: ig.Entity.COLLIDES.PASSIVE,




_inParameter: function() {var ball =  ig.game.loadedBallType;
if (this.atRest && ball.vel.y == 0) {
return (
ig.input.mouse.x + ig.game.screen.x > this.pos.x-24 &&
 
ig.input.mouse.x + ig.game.screen.x < this.pos.x+48 &&

ig.input.mouse.y + ig.game.screen.y > this.pos.y &&

ig.input.mouse.y + ig.game.screen.y < this.pos.y+48 
)



}
},

check: function( other )
	{
if (other.vel.y ==0){
	this.unId = other.id//ig.game.getEntityByID(other.id)
	this.ballType = ig.game.getEntityByID(this.unId)//unId
}
		},
		





});

});
